export const DESCRIPTION = '快速文件模式匹配工具'

export const PROMPT = `快速文件模式匹配工具，适用于任意大小的代码库，用于按名称模式查找文件。

基本功能:
- 支持 glob 模式匹配，如 "**/*.js" 或 "src/**/*.ts"
- 返回匹配的文件路径，按修改时间排序
- 在需要按文件名模式查找文件时使用此工具

使用场景:
- 按文件名查找：找到所有 JavaScript 文件
- 按目录结构查找：查找特定目录下的文件
- 按文件扩展名查找：所有配置文件、测试文件等
- 项目结构分析：了解项目的文件组织

Glob 模式语法:

1. **基础通配符**:
   - \`*\`: 匹配任意字符（不包括路径分隔符）
   - \`**\`: 匹配任意字符（包括路径分隔符）
   - \`?\`: 匹配单个字符
   - \`[abc]\`: 匹配字符集中的任意字符
   - \`{a,b,c}\`: 匹配大括号中的任意选项

2. **常用模式**:
   - \`*.js\`: 当前目录下所有 .js 文件
   - \`**/*.js\`: 所有目录下的 .js 文件
   - \`src/**/*.ts\`: src 目录下所有 .ts 文件
   - \`**/*test*.js\`: 所有包含 "test" 的 .js 文件
   - \`*.{js,ts}\`: 所有 .js 和 .ts 文件

3. **复杂模式**:
   - \`**/{src,lib}/**/*.{js,ts}\`: src 或 lib 目录下的 JS/TS 文件
   - \`**/test/**/*\`: 所有测试目录下的文件
   - \`**/*.config.{js,json}\`: 所有配置文件

使用指导:

1. **项目探索**:
   - 了解文件结构：\`**/*\`
   - 查找特定类型文件：\`**/*.{extension}\`
   - 按目录查找：\`directory/**/*\`

2. **代码分析**:
   - 源码文件：\`**/*.{js,ts,jsx,tsx}\`
   - 测试文件：\`**/*{test,spec}*\`
   - 配置文件：\`**/*.{json,yaml,yml,toml}\`

3. **文档查找**:
   - Markdown 文档：\`**/*.md\`
   - README 文件：\`**/README*\`
   - 文档目录：\`{docs,doc}/**/*\`

参数说明:
- pattern（必需）：要匹配的 glob 模式
- path（可选）：搜索目录，默认为当前工作目录

性能特点:
- 针对大型代码库优化
- 快速文件系统遍历
- 结果按修改时间排序，最新文件优先

最佳实践:

1. **模式设计**:
   - 从具体到宽泛：先尝试精确模式
   - 避免过于宽泛的模式（如单独的 \`**/*\`）
   - 使用文件扩展名过滤减少结果

2. **与其他工具协作**:
   - 结合 Grep 工具：先 Glob 找文件，再 Grep 搜内容
   - 结合 Read 工具：找到文件后读取内容
   - 批量操作：找到文件列表后批量处理

3. **开放性搜索**:
   - 当需要多轮 globbing 和 grepping 时，使用 Task 工具
   - 不确定文件位置时，使用渐进式搜索策略

常见用例:

1. **寻找特定组件**:
   \`components/**/*.{jsx,tsx}\`

2. **查找配置文件**:
   \`**/*.{config,rc}.{js,json}\`

3. **定位测试文件**:
   \`**/{__tests__,test,tests}/**/*\`

4. **查找样式文件**:
   \`**/*.{css,scss,less,styled}\`

5. **寻找类型定义**:
   \`**/*.d.ts\`

限制和注意事项:
- 只能查找文件，不能搜索文件内容
- 返回文件路径，不返回文件内容
- 对于内容搜索，请使用 Grep 工具
- 大型项目中避免使用过于宽泛的模式

错误处理:
- 无匹配文件：返回空列表
- 路径不存在：提示目录错误
- 权限问题：自动跳过无权限文件

与 Grep 工具的区别:
- Glob：按文件名和路径模式查找文件
- Grep：在文件内容中搜索文本模式
- 通常先用 Glob 定位文件，再用 Grep 搜索内容`

export const TOOL_NAME_FOR_PROMPT = 'Glob'