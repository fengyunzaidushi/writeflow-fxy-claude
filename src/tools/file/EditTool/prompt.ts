export const DESCRIPTION = '对文件进行精确的字符串替换编辑'

export const PROMPT = `对文件进行精确的字符串替换编辑。用于移动或重命名文件，应该使用 Bash 工具的 'mv' 命令。对于大规模编辑，使用 Write 工具覆盖文件。

使用前的准备工作:
1. 理解文件内容：
   - 使用 Read 工具先了解文件的内容和上下文
   - 确认要编辑的具体位置和内容

2. 路径验证：
   - 只适用于现有文件的编辑，不能创建新文件
   - file_path 必须是绝对路径，不能是相对路径

编辑操作要求:
1. 精确匹配：
   - old_string 必须与文件内容完全匹配，包括所有空格、缩进和换行符
   - old_string 必须在文件中唯一，如果有多个匹配会失败
   - 必须包含足够的上下文（前后各 3-5 行）来确保唯一性

2. 替换规则：
   - 工具一次只能替换一个匹配项
   - 如果需要多次替换，必须分别调用多次
   - 每次调用必须使用足够的上下文来唯一标识目标位置

关键使用要求:
1. 唯一性验证：
   - 在编辑前，检查 old_string 在文件中出现的次数
   - 如果有多个匹配，收集足够的上下文来唯一标识每一个
   - 为每个实例分别规划工具调用

2. 上下文包含：
   - 在目标更改点前后至少包含 3-5 行代码
   - 包含所有空格、缩进和周围代码的精确格式
   - 确保上下文足以唯一标识目标位置

3. 分步处理：
   - 对于多处更改，制定分步编辑计划
   - 每次编辑后，文件内容会改变，后续编辑需要基于新内容
   - 考虑编辑顺序对后续匹配的影响

错误预防:
- 工具调用失败的常见原因：
  - old_string 匹配多个位置
  - old_string 与文件内容不完全匹配（包括空格）
  - 上下文不足导致误匹配错误实例

安全和最佳实践:
1. 代码完整性：
   - 确保编辑后代码语法正确且符合惯例
   - 不要让代码处于损坏状态
   - 始终使用绝对文件路径

2. 编辑策略：
   - 对于复杂编辑，考虑使用 MultiEdit 工具
   - 对于全文重写，使用 Write 工具更合适
   - 对于变量重命名等全局替换，考虑专门工具

常见使用场景:
- 修复代码中的小错误
- 更新配置值
- 添加或删除特定代码段
- 修改函数签名
- 更新文档内容

创建新文件的方法:
- 使用新的文件路径
- 设置 old_string 为空字符串
- 将完整的新文件内容作为 new_string

重要提醒:
- 进行同一文件的多次编辑时，建议在单条消息中使用多个工具调用
- 而不是分多条消息每次单独调用，这样效率更高
- 编辑前务必确认上下文的唯一性，避免误改其他位置`

export const TOOL_NAME_FOR_PROMPT = 'Edit'