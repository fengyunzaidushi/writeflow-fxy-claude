export const DESCRIPTION = '向本地文件系统写入文件内容'

export const PROMPT = `向本地文件系统写入文件内容。如果文件已存在，将完全覆盖原文件内容。

使用前的准备工作:
1. 路径验证：
   - 确保 file_path 是绝对路径，不能是相对路径
   - 如果是新文件，使用 LS 工具验证父目录存在且是正确位置

2. 权限检查：
   - 确认有写入目标路径的权限
   - 安全模式下可能限制某些路径的写入

文件写入规则:
- file_path: 要写入的文件的绝对路径
- content: 要写入的完整内容
- 工具会自动创建不存在的父目录
- 工具会检测并保持适当的文件编码
- 工具会自动处理换行符格式

支持的操作:
- 创建新文件：提供新的文件路径和内容
- 覆盖现有文件：完全替换文件内容
- 自动处理：文件编码检测、换行符统一、权限设置

安全和最佳实践:
1. 文件备份：
   - 覆盖重要文件前，建议先用 Read 工具备份原内容
   - 对于项目文件，确保在 git 管理下

2. 内容验证：
   - 写入代码文件时，确保语法正确
   - 写入配置文件时，验证格式正确性
   - 写入文档时，检查标记语法

3. 路径安全：
   - 只使用绝对路径，避免路径注入
   - 避免写入系统关键目录
   - 注意文件名的特殊字符处理

常见使用场景:
- 创建新的代码文件
- 生成配置文件
- 保存文档和报告
- 创建临时文件
- 导出处理结果

错误处理:
- 路径不存在：自动创建必要的目录结构
- 权限不足：提示需要相应权限
- 磁盘空间不足：提示存储空间问题
- 文件被占用：提示文件使用状态

输出格式:
- 成功时显示写入的文件路径和行数
- 如果是覆盖操作，显示原文件和新文件的差异
- 失败时提供详细的错误信息和解决建议

注意事项:
- 此工具会完全覆盖现有文件，无法撤销
- 对于大型文件或敏感文件，请谨慎使用
- 建议配合版本控制系统使用，以便跟踪文件变更`

export const TOOL_NAME_FOR_PROMPT = 'Write'