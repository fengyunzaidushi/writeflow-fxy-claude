export const DESCRIPTION = '对单个文件进行多次编辑操作的高效工具'

export const PROMPT = `对单个文件进行多次编辑操作的高效工具。基于 Edit 工具构建，允许在一次操作中对同一文件执行多个查找和替换操作。当需要对同一文件进行多次修改时，优先使用此工具而不是多次调用 Edit 工具。

使用前的准备工作:
1. 文件内容理解：
   - 使用 Read 工具了解文件的内容和上下文
   - 确认所有要编辑的位置和内容

2. 路径验证：
   - 确认目录路径正确，file_path 必须是绝对路径，不能是相对路径
   - 使用 LS 工具验证父目录存在（仅适用于创建新文件时）

多重编辑操作:
1. 编辑数组：
   - 提供编辑操作数组，每个编辑包含 old_string 和 new_string
   - 编辑按提供的顺序依次执行
   - 每个编辑操作基于前一个编辑的结果进行

2. 顺序执行：
   - 所有编辑必须对操作成功才能应用，否则全部回滚
   - 编辑是原子性的 - 要么全部成功，要么全部失败
   - 仔细规划编辑顺序，避免早期编辑影响后期编辑的文本匹配

关键要求和限制:
1. 精确匹配要求：
   - 每个 old_string 必须与文件内容完全匹配（包括空格）
   - old_string 和 new_string 不能相同
   - 由于编辑是顺序执行的，确保早期编辑不会影响后期编辑要查找的文本

2. 唯一性保证：
   - 每个 old_string 必须在当前文件状态下唯一
   - 包含足够的上下文确保匹配的唯一性
   - 如果需要替换多个相同的字符串，使用 replace_all 参数

编辑规划策略:
1. 编辑顺序：
   - 从文件末尾向开头编辑，减少行号变化的影响
   - 或者按逻辑块分组，确保编辑之间不会冲突
   - 考虑编辑操作对文件结构的影响

2. 冲突避免：
   - 确保编辑操作不会相互干扰
   - 避免早期编辑改变后期编辑的目标文本
   - 对于变量重命名等全局操作，使用 replace_all 参数

可选参数:
- replace_all: 替换所有出现的 old_string（默认为 false）
- 适用于重命名变量、更新配置值等场景
- 使用时要特别小心，确保不会误改其他内容

创建新文件:
- 使用新的文件路径（包含目录名）
- 第一个编辑：old_string 为空，new_string 为文件初始内容
- 后续编辑：基于创建的内容进行正常编辑操作

使用场景:
- 代码重构：同时修改多个相关的代码片段
- 配置更新：批量更新配置文件中的多个值
- 文档编辑：同时修改文档的多个部分
- 模板处理：替换模板中的多个占位符

最佳实践:
1. 编辑验证：
   - 确保所有编辑结果都是符合语言规范的代码
   - 不要让代码处于损坏状态
   - 始终使用绝对文件路径（以 / 开头）

2. 性能优化：
   - 优先使用此工具而不是多次调用 Edit 工具
   - 合理规划编辑批次，避免过多的小批量编辑
   - 对于大规模重写，考虑直接使用 Write 工具

错误处理:
- 如果任何一个编辑失败，整个操作都会失败
- 提供清晰的错误信息，指明失败的具体编辑操作
- 建议分解复杂编辑为更小的、更容易验证的操作

警告事项:
- 工具会在所有编辑操作都有效时才执行修改
- 如果编辑失败，不会应用任何更改
- 复杂编辑可能需要多次尝试和调整来完善匹配条件`

export const TOOL_NAME_FOR_PROMPT = 'MultiEdit'